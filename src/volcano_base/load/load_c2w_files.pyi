import pathlib
import xarray as xr
from _typeshed import Incomplete as Incomplete
from collections.abc import Iterable
from returns.result import Result as Result
from typing import Self, overload
from xarray.core.types import T_Xarray as T_Xarray

class CESM2FileNotFound(FileNotFoundError):
    message: Incomplete
    def __init__(self, *args: object) -> None: ...

class RegexLookup:
    ft: Incomplete
    groups: Incomplete
    reverse_search_query: Incomplete
    regex: Incomplete
    def __init__(self, ft: str, group_names: dict[str, str], reverse_search_query: pathlib.Path, regex: str) -> None: ...
    root_path: Incomplete
    def search(self) -> None: ...
    def reverse_search(self, file_tuple: tuple[str, ...], ft: str) -> pathlib.Path: ...

def default_regex() -> RegexLookup: ...
def nird_archive_regex() -> RegexLookup: ...

class FindFiles:
    regex: Incomplete
    def __init__(self, regex: RegexLookup | None = None) -> None: ...
    def copy(self) -> Self: ...
    def __len__(self) -> int: ...
    def avail(self) -> None: ...
    def get_files(self) -> Result[list[tuple[str, ...]], str]: ...
    def print_files(self) -> None: ...
    @overload
    def sort(self, *attributes: str, arrays: list[T_Xarray]) -> list[T_Xarray]: ...
    @overload
    def sort(self, *attributes: str, reverse: bool) -> Self: ...
    @overload
    def sort(self, *attributes: str) -> Self: ...
    def find(self, *args: str | Iterable[str]) -> Self: ...
    def remove(self, *args: str) -> Self: ...
    def keep(self, *args: str | Iterable[str]) -> Self: ...
    def keep_most_recent(self) -> Self: ...
    def load(self, *files: tuple[str, ...], ft: str | None = None) -> list[xr.DataArray]: ...
