import numpy as np
import xarray as xr
from _typeshed import Incomplete as Incomplete
from numpy.typing import NDArray as NDArray
from pydantic import BaseModel
from typing import Literal

class Ob16FileNotFound(FileNotFoundError):
    message: Incomplete
    def __init__(self, *args: str) -> None: ...

class OttoBliesner(BaseModel):
    freq: Literal['h0', 'h1']
    progress: bool
    class Config:
        validate_assignment: bool
        frozen: bool
        extra: str
        strict: bool
    @property
    def temperature_ensemble(self) -> tuple[xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray]: ...
    @property
    def temperature_median(self) -> xr.DataArray: ...
    @property
    def temperature_control_raw(self) -> xr.DataArray: ...
    @property
    def temperature_control(self) -> xr.DataArray: ...
    @property
    def temperature_peaks(self) -> NDArray[np.float64]: ...
    @property
    def rf_ensemble(self) -> tuple[xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray]: ...
    @property
    def rf_median(self) -> xr.DataArray: ...
    @property
    def rf_control_raw(self) -> xr.DataArray: ...
    @property
    def rf_control(self) -> xr.DataArray: ...
    @property
    def rf_peaks(self) -> NDArray[np.float64]: ...
    @property
    def icefrac_ensemble(self) -> tuple[xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray, xr.DataArray]: ...
    @property
    def icefrac_median(self) -> xr.DataArray: ...
    @property
    def icefrac_control_raw(self) -> xr.DataArray: ...
    @property
    def icefrac_control(self) -> xr.DataArray: ...
    @property
    def icefrac_peaks(self) -> NDArray[np.float64]: ...
    @property
    def so2(self) -> xr.DataArray: ...
    @property
    def so2_delta(self) -> xr.DataArray: ...
    @property
    def aligned_arrays(self) -> dict[Literal['so2-decay-start', 'so2-start', 'so2-rf', 'so2-temperature', 'icefrac', 'rf', 'temperature'], xr.DataArray]: ...
    @property
    def so2_peaks(self) -> NDArray[np.float64]: ...
